// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Device Manager",
    "version": "0.1.0"
  },
  "basePath": "/api",
  "paths": {
    "/user": {
      "post": {
        "description": "Регистрации нового пользователя",
        "tags": [
          "user"
        ],
        "operationId": "userRegistration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Информация о пользователе",
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "example": {
                "email": "test@example.com"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "example": {
                "token": "JWT"
              }
            }
          },
          "422": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/errorResult"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "000-000",
                  "description": "description"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "errorResult": {
      "description": "Ответ API с ошибкой",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "code",
            "description"
          ],
          "properties": {
            "code": {
              "description": "HTTP-статус ответа",
              "type": "string",
              "x-isnullable": false,
              "example": "003-061"
            },
            "description": {
              "description": "Человекопонятное описание ошибки",
              "type": "string",
              "x-isnullable": false,
              "example": "Object not found"
            }
          }
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Device Manager",
    "version": "0.1.0"
  },
  "basePath": "/api",
  "paths": {
    "/user": {
      "post": {
        "description": "Регистрации нового пользователя",
        "tags": [
          "user"
        ],
        "operationId": "userRegistration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "description": "Информация о пользователе",
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "example": {
                "email": "test@example.com"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "string",
                  "x-isnullable": false
                }
              },
              "example": {
                "token": "JWT"
              }
            }
          },
          "422": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/errorResult"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "000-000",
                  "description": "description"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "errorResult": {
      "description": "Ответ API с ошибкой",
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "object",
          "required": [
            "code",
            "description"
          ],
          "properties": {
            "code": {
              "description": "HTTP-статус ответа",
              "type": "string",
              "x-isnullable": false,
              "example": "003-061"
            },
            "description": {
              "description": "Человекопонятное описание ошибки",
              "type": "string",
              "x-isnullable": false,
              "example": "Object not found"
            }
          }
        }
      }
    }
  }
}`))
}
