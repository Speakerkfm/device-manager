// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// UserRegistrationHandlerFunc turns a function with the right signature into a user registration handler
type UserRegistrationHandlerFunc func(UserRegistrationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserRegistrationHandlerFunc) Handle(params UserRegistrationParams) middleware.Responder {
	return fn(params)
}

// UserRegistrationHandler interface for that can handle valid user registration params
type UserRegistrationHandler interface {
	Handle(UserRegistrationParams) middleware.Responder
}

// NewUserRegistration creates a new http.Handler for the user registration operation
func NewUserRegistration(ctx *middleware.Context, handler UserRegistrationHandler) *UserRegistration {
	return &UserRegistration{Context: ctx, Handler: handler}
}

/*UserRegistration swagger:route POST /users users userRegistration

Регистрации нового пользователя

*/
type UserRegistration struct {
	Context *middleware.Context
	Handler UserRegistrationHandler
}

func (o *UserRegistration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserRegistrationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UserRegistrationBody Информация о пользователе
// swagger:model UserRegistrationBody
type UserRegistrationBody struct {

	// email
	// Required: true
	// Format: email
	Email strfmt.Email `json:"email"`
}

// Validate validates this user registration body
func (o *UserRegistrationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserRegistrationBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"email", "body", strfmt.Email(o.Email)); err != nil {
		return err
	}

	if err := validate.FormatOf("body"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserRegistrationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserRegistrationBody) UnmarshalBinary(b []byte) error {
	var res UserRegistrationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// UserRegistrationOKBody user registration o k body
// swagger:model UserRegistrationOKBody
type UserRegistrationOKBody struct {

	// token
	// Required: true
	Token string `json:"token"`
}

// Validate validates this user registration o k body
func (o *UserRegistrationOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserRegistrationOKBody) validateToken(formats strfmt.Registry) error {

	if err := validate.RequiredString("userRegistrationOK"+"."+"token", "body", string(o.Token)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserRegistrationOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserRegistrationOKBody) UnmarshalBinary(b []byte) error {
	var res UserRegistrationOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
