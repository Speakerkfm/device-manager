// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// DeviceRegistrationHandlerFunc turns a function with the right signature into a device registration handler
type DeviceRegistrationHandlerFunc func(DeviceRegistrationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeviceRegistrationHandlerFunc) Handle(params DeviceRegistrationParams) middleware.Responder {
	return fn(params)
}

// DeviceRegistrationHandler interface for that can handle valid device registration params
type DeviceRegistrationHandler interface {
	Handle(DeviceRegistrationParams) middleware.Responder
}

// NewDeviceRegistration creates a new http.Handler for the device registration operation
func NewDeviceRegistration(ctx *middleware.Context, handler DeviceRegistrationHandler) *DeviceRegistration {
	return &DeviceRegistration{Context: ctx, Handler: handler}
}

/*DeviceRegistration swagger:route POST /devices devices deviceRegistration

Регистрации нового устройства

*/
type DeviceRegistration struct {
	Context *middleware.Context
	Handler DeviceRegistrationHandler
}

func (o *DeviceRegistration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeviceRegistrationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeviceRegistrationBody Информация об устройстве
// swagger:model DeviceRegistrationBody
type DeviceRegistrationBody struct {

	// device name
	// Required: true
	DeviceName string `json:"device_name"`

	// owner email
	// Required: true
	OwnerEmail string `json:"owner_email"`
}

// Validate validates this device registration body
func (o *DeviceRegistrationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwnerEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeviceRegistrationBody) validateDeviceName(formats strfmt.Registry) error {

	if err := validate.RequiredString("body"+"."+"device_name", "body", string(o.DeviceName)); err != nil {
		return err
	}

	return nil
}

func (o *DeviceRegistrationBody) validateOwnerEmail(formats strfmt.Registry) error {

	if err := validate.RequiredString("body"+"."+"owner_email", "body", string(o.OwnerEmail)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeviceRegistrationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeviceRegistrationBody) UnmarshalBinary(b []byte) error {
	var res DeviceRegistrationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeviceRegistrationOKBody device registration o k body
// swagger:model DeviceRegistrationOKBody
type DeviceRegistrationOKBody struct {

	// token
	// Required: true
	Token string `json:"token"`
}

// Validate validates this device registration o k body
func (o *DeviceRegistrationOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeviceRegistrationOKBody) validateToken(formats strfmt.Registry) error {

	if err := validate.RequiredString("deviceRegistrationOK"+"."+"token", "body", string(o.Token)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeviceRegistrationOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeviceRegistrationOKBody) UnmarshalBinary(b []byte) error {
	var res DeviceRegistrationOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
