// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// DevicesListHandlerFunc turns a function with the right signature into a devices list handler
type DevicesListHandlerFunc func(DevicesListParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DevicesListHandlerFunc) Handle(params DevicesListParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DevicesListHandler interface for that can handle valid devices list params
type DevicesListHandler interface {
	Handle(DevicesListParams, interface{}) middleware.Responder
}

// NewDevicesList creates a new http.Handler for the devices list operation
func NewDevicesList(ctx *middleware.Context, handler DevicesListHandler) *DevicesList {
	return &DevicesList{Context: ctx, Handler: handler}
}

/*DevicesList swagger:route GET /devices devices devicesList

Получение списка устройств пользователя

*/
type DevicesList struct {
	Context *middleware.Context
	Handler DevicesListHandler
}

func (o *DevicesList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDevicesListParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DevicesListOKBodyItems0 devices list o k body items0
// swagger:model DevicesListOKBodyItems0
type DevicesListOKBodyItems0 struct {

	// device id
	// Required: true
	// Format: uuid
	DeviceID strfmt.UUID `json:"device_id"`

	// device name
	// Required: true
	DeviceName string `json:"device_name"`

	// last meter readings time
	LastMeterReadingsTime *string `json:"last_meter_readings_time,omitempty"`
}

// Validate validates this devices list o k body items0
func (o *DevicesListOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DevicesListOKBodyItems0) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("device_id", "body", strfmt.UUID(o.DeviceID)); err != nil {
		return err
	}

	if err := validate.FormatOf("device_id", "body", "uuid", o.DeviceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *DevicesListOKBodyItems0) validateDeviceName(formats strfmt.Registry) error {

	if err := validate.RequiredString("device_name", "body", string(o.DeviceName)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DevicesListOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DevicesListOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res DevicesListOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
