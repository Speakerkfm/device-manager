// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "device-manager/pkg/models"

// DeviceService is an autogenerated mock type for the DeviceService type
type DeviceService struct {
	mock.Mock
}

// CheckUserDevice provides a mock function with given fields: userEmail, deviceID
func (_m *DeviceService) CheckUserDevice(userEmail string, deviceID string) bool {
	ret := _m.Called(userEmail, deviceID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userEmail, deviceID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetDeviceStats provides a mock function with given fields: deviceID
func (_m *DeviceService) GetDeviceStats(deviceID string) ([]*models.DeviceReadings, error) {
	ret := _m.Called(deviceID)

	var r0 []*models.DeviceReadings
	if rf, ok := ret.Get(0).(func(string) []*models.DeviceReadings); ok {
		r0 = rf(deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.DeviceReadings)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDevices provides a mock function with given fields: userEmail
func (_m *DeviceService) GetUserDevices(userEmail string) ([]*models.Device, error) {
	ret := _m.Called(userEmail)

	var r0 []*models.Device
	if rf, ok := ret.Get(0).(func(string) []*models.Device); ok {
		r0 = rf(userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDevice provides a mock function with given fields: ownerEmail, deviceName
func (_m *DeviceService) NewDevice(ownerEmail string, deviceName string) (string, error) {
	ret := _m.Called(ownerEmail, deviceName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(ownerEmail, deviceName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(ownerEmail, deviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDeviceReadings provides a mock function with given fields: deviceID, readingsTime, temperature
func (_m *DeviceService) SaveDeviceReadings(deviceID string, readingsTime string, temperature float64) error {
	ret := _m.Called(deviceID, readingsTime, temperature)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, float64) error); ok {
		r0 = rf(deviceID, readingsTime, temperature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
