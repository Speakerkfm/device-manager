// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "device-manager/pkg/models"
)

// DeviceStatsHandlerFunc turns a function with the right signature into a device stats handler
type DeviceStatsHandlerFunc func(DeviceStatsParams, *models.AuthKey) middleware.Responder

// Handle executing the request and returning a response
func (fn DeviceStatsHandlerFunc) Handle(params DeviceStatsParams, principal *models.AuthKey) middleware.Responder {
	return fn(params, principal)
}

// DeviceStatsHandler interface for that can handle valid device stats params
type DeviceStatsHandler interface {
	Handle(DeviceStatsParams, *models.AuthKey) middleware.Responder
}

// NewDeviceStats creates a new http.Handler for the device stats operation
func NewDeviceStats(ctx *middleware.Context, handler DeviceStatsHandler) *DeviceStats {
	return &DeviceStats{Context: ctx, Handler: handler}
}

/*DeviceStats swagger:route GET /devices/{device_id}/stats devices deviceStats

Получение статистики устройства

*/
type DeviceStats struct {
	Context *middleware.Context
	Handler DeviceStatsHandler
}

func (o *DeviceStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeviceStatsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.AuthKey
	if uprinc != nil {
		principal = uprinc.(*models.AuthKey) // this is really a models.AuthKey, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
